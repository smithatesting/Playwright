"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XrayService = void 0;
const axios_1 = __importDefault(require("axios"));
const util_1 = require("util");
const picocolors_1 = require("picocolors");
const fs = __importStar(require("fs"));
const help_1 = __importDefault(require("./help"));
function isAxiosError(error) {
    return error.isAxiosError === true;
}
class XrayService {
    constructor(options) {
        // Init vars
        this.xray = '';
        this.username = '';
        this.password = '';
        this.token = '';
        this.requestUrl = '';
        this.options = options;
        this.help = new help_1.default(this.options.jira.type);
        // Set Jira URL
        if (!options.jira.url)
            throw new Error('"jira.url" option is missed. Please, provide it in the config');
        this.jira = options.jira.url;
        // Set Jira Server Type
        if (!options.jira.type)
            throw new Error('"jira.type" option is missed. Please, provide it in the config');
        this.type = options.jira.type;
        // Init axios instance
        this.axios = axios_1.default;
        this.axios.defaults.headers.options = {
            'Cache-Control': 'no-cache',
            Pragma: 'no-cache',
            Expires: '0',
        };
        switch (this.type) {
            case 'cloud':
                // Set Xray Server URL
                this.xray = 'https://xray.cloud.getxray.app/';
                // Set Xray Credencials
                if (!options.cloud?.client_id || !options.cloud?.client_secret)
                    throw new Error('"cloud.client_id" and/or "cloud.client_secret" options are missed. Please provide them in the config');
                this.username = options.cloud?.client_id;
                this.password = options.cloud?.client_secret;
                // Set Request URL
                this.requestUrl = this.xray + 'api/v2';
                //Create Axios Instance with Auth
                axios_1.default
                    .post(this.requestUrl + '/authenticate', {
                    client_id: this.username,
                    client_secret: this.password,
                })
                    .then((request) => {
                    this.axios = axios_1.default.create({
                        baseURL: this.xray,
                        headers: {
                            'Content-Type': 'application/json',
                            Authorization: `Bearer ${request.data}`,
                        },
                    });
                })
                    .catch((error) => {
                    throw new Error(`Failed to autenticate do host ${this.xray} with error: ${error}`);
                });
                break;
            case 'server':
                // Set Xray Server URL
                if (!options.jira?.url)
                    throw new Error('"host" option is missed. Please, provide it in the config');
                this.xray = options.jira?.url;
                // Set Xray Credencials
                if (!options.server?.token)
                    throw new Error('"server.token" option is missing. Please provide them in the config');
                this.token = options.server?.token;
                // Set Request URL
                this.requestUrl = this.xray + 'rest/raven/1.0';
                //Create Axios Instance with Auth
                this.axios = axios_1.default.create({
                    baseURL: this.xray,
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${this.token}`,
                    },
                });
                break;
        }
        // Set Project Key
        if (!options.projectKey)
            throw new Error('"projectKey" option is missed. Please, provide it in the config');
        // Set Test Plan
        if (!options.testPlan)
            throw new Error('"testPlan" option are missed. Please provide them in the config');
    }
    async createRun(results, execInfo) {
        const URL = `${this.requestUrl}/import/execution`;
        const total = results.tests?.length;
        const duration = new Date(results.info.finishDate).getTime() - new Date(results.info.startDate).getTime();
        let passed = 0;
        let failed = 0;
        //console.log(results);
        results.tests.forEach((test) => {
            switch (test.status) {
                case 'PASS':
                case 'PASSED':
                    passed = passed + 1;
                    break;
                case 'FAIL':
                case 'FAILED':
                    failed = failed + 1;
                    break;
            }
        });
        try {
            if (this.options.debug) {
                fs.writeFile('xray-payload.json', JSON.stringify(results), (err) => {
                    if (err)
                        throw err;
                });
            }
            const response = await this.axios.post(URL, JSON.stringify(results), {
                maxBodyLength: 107374182400,
                maxContentLength: 107374182400,
                timeout: 600000,
                proxy: this.options.proxy !== undefined ? this.options.proxy : false,
            });
            if (response.status !== 200)
                throw new Error(`${response.status} - Failed to create test cycle`);
            let key = response.data.key;
            if (this.options.jira.type === 'server') {
                key = response.data.testExecIssue.key;
            }
            let action = 'created';
            if (this.options.testExecution !== undefined) {
                action = 'updated';
            }
            // Results
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(` `))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(`-------------------------------------`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(` `))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.green)(`üòÄ Successfully sending test results to Jira`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(` `))}`);
            if (this.options.description !== undefined) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`‚è∫  `))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Description:       ${this.options.description}`))}`);
            }
            if (this.options.testEnvironments !== undefined) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`‚è∫  `))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Test environments: ${this.options.testEnvironments}`))}`);
            }
            if (this.options.version !== undefined) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`‚è∫  `))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Version:           ${this.options.version}`))}`);
            }
            if (this.options.revision !== undefined) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`‚è∫  `))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Revision:          ${this.options.revision}`))}`);
            }
            if (execInfo.browserName !== undefined) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`‚è∫  `))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Browsers:          ${execInfo.browserName}`))}`);
            }
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`‚è∫  `))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Test plan:         ${this.options.testPlan}`))}`);
            if (this.options.testExecution !== undefined) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`‚è∫  `))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Test execution:    ${this.options.testExecution}`))}`);
            }
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`‚è∫  `))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Test Duration:     ${this.help.convertMsToTime(duration)}`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`‚è∫  `))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Tests ran:         ${total}`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`‚è∫  `))}${(0, picocolors_1.bold)((0, picocolors_1.green)(`Tests passed:      ${passed}`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`‚è∫  `))}${(0, picocolors_1.bold)((0, picocolors_1.red)(`Tests failed:      ${failed}`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(` `))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(`-------------------------------------`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(` `))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`‚è∫  `))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Test cycle ${key} has been ${action}`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)('üëá Check out the test result'))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(`üîó ${this.jira}browse/${key}`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(` `))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(`-------------------------------------`))}`);
        }
        catch (error) {
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(` `))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(`-------------------------------------`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(` `))}`);
            let log = '';
            let msg = '';
            if (isAxiosError(error)) {
                log = `Config: ${(0, util_1.inspect)(error.config)}\n\n`;
                if (error.response) {
                    msg = (0, util_1.inspect)(error.response.data.error);
                    msg = msg.replace(/'/g, '');
                    log += `Status: ${error.response.status}\n`;
                    log += `Headers: ${(0, util_1.inspect)(error.response.headers)}\n`;
                    log += `Data: ${(0, util_1.inspect)(error.response.data)}\n`;
                }
                else if (error.request) {
                    msg = 'The request was made but no response was received';
                    log += `Error: ${(0, util_1.inspect)(error.toJSON())}\n`;
                }
                else {
                    msg = 'Something happened in setting up the request that triggered an error';
                    log += `Error: ${(0, util_1.inspect)(error.message)}\n`;
                }
            }
            else {
                log = `Unknown error: ${error}\n`;
            }
            fs.writeFileSync('playwright-xray-error.log', log);
            let msgs = msg.split(';');
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.red)(`üòû Error sending test results to Jira`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(` `))}`);
            msgs.forEach((m) => {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.red)(`‚õî ${m}`))}`);
            });
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(` `))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)('üëâ Check the "playwright-xray-error.log" file for more details'))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(` `))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(`-------------------------------------`))}`);
        }
    }
}
exports.XrayService = XrayService;
