"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workflows = void 0;
const tslib_1 = require("tslib");
const paramSerializer_1 = require("../paramSerializer");
class Workflows {
    constructor(client) {
        this.client = client;
    }
    getAllWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/workflow',
                method: 'GET',
                params: {
                    workflowName: parameters === null || parameters === void 0 ? void 0 : parameters.workflowName,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/workflow',
                method: 'POST',
                data: {
                    name: parameters.name,
                    description: parameters.description,
                    transitions: parameters.transitions,
                    statuses: parameters.statuses,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getWorkflowsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/workflow/search',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    workflowName: (0, paramSerializer_1.paramSerializer)('workflowName', parameters === null || parameters === void 0 ? void 0 : parameters.workflowName),
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                    isActive: parameters === null || parameters === void 0 ? void 0 : parameters.isActive,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteInactiveWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const entityId = typeof parameters === 'string' ? parameters : parameters.entityId;
            const config = {
                url: `/rest/api/2/workflow/${entityId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Workflows = Workflows;
//# sourceMappingURL=workflows.js.map