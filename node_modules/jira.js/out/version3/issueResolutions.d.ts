import * as Models from './models';
import * as Parameters from './parameters';
import { Callback } from '../callback';
import { Client } from '../clients';
export declare class IssueResolutions {
    private client;
    constructor(client: Client);
    /**
     * @deprecated Returns a list of all issue resolution values.
     *
     *   **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     *   Permission to access Jira.
     */
    getResolutions<T = Models.Resolution[]>(callback: Callback<T>): Promise<void>;
    /**
     * @deprecated Returns a list of all issue resolution values.
     *
     *   **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     *   Permission to access Jira.
     */
    getResolutions<T = Models.Resolution[]>(callback?: never): Promise<T>;
    /**
     * Creates an issue resolution.
     *
     * **[Permissions](#permissions) required:** _Administer Jira_ [global
     * permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    createResolution<T = Models.ResolutionId>(parameters: Parameters.CreateResolution, callback: Callback<T>): Promise<void>;
    /**
     * Creates an issue resolution.
     *
     * **[Permissions](#permissions) required:** _Administer Jira_ [global
     * permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    createResolution<T = Models.ResolutionId>(parameters: Parameters.CreateResolution, callback?: never): Promise<T>;
    /**
     * Sets default issue resolution.
     *
     * **[Permissions](#permissions) required:** _Administer Jira_ [global
     * permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    setDefaultResolution<T = void>(parameters: Parameters.SetDefaultResolution, callback: Callback<T>): Promise<void>;
    /**
     * Sets default issue resolution.
     *
     * **[Permissions](#permissions) required:** _Administer Jira_ [global
     * permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    setDefaultResolution<T = void>(parameters: Parameters.SetDefaultResolution, callback?: never): Promise<T>;
    /**
     * Changes the order of issue resolutions.
     *
     * **[Permissions](#permissions) required:** _Administer Jira_ [global
     * permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    moveResolutions<T = void>(parameters: Parameters.MoveResolutions, callback: Callback<T>): Promise<void>;
    /**
     * Changes the order of issue resolutions.
     *
     * **[Permissions](#permissions) required:** _Administer Jira_ [global
     * permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    moveResolutions<T = void>(parameters: Parameters.MoveResolutions, callback?: never): Promise<T>;
    /**
     * Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined
     * by any combination of these criteria:
     *
     * - A list of resolutions IDs.
     * - Whether the field configuration is a default. This returns resolutions from company-managed (classic) projects
     *   only, as there is no concept of default resolutions in team-managed projects.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    searchResolutions<T = Models.PageResolution>(parameters: Parameters.SearchResolutions | undefined, callback: Callback<T>): Promise<void>;
    /**
     * Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined
     * by any combination of these criteria:
     *
     * - A list of resolutions IDs.
     * - Whether the field configuration is a default. This returns resolutions from company-managed (classic) projects
     *   only, as there is no concept of default resolutions in team-managed projects.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    searchResolutions<T = Models.PageResolution>(parameters?: Parameters.SearchResolutions, callback?: never): Promise<T>;
    /**
     * @deprecated Returns an issue resolution value.
     *
     *   **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     *   Permission to access Jira.
     */
    getResolution<T = Models.Resolution>(parameters: Parameters.GetResolution, callback: Callback<T>): Promise<void>;
    /**
     * @deprecated Returns an issue resolution value.
     *
     *   **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     *   Permission to access Jira.
     */
    getResolution<T = Models.Resolution>(parameters: Parameters.GetResolution, callback?: never): Promise<T>;
    /**
     * Updates an issue resolution.
     *
     * **[Permissions](#permissions) required:** _Administer Jira_ [global
     * permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    updateResolution<T = void>(parameters: Parameters.UpdateResolution, callback: Callback<T>): Promise<void>;
    /**
     * Updates an issue resolution.
     *
     * **[Permissions](#permissions) required:** _Administer Jira_ [global
     * permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    updateResolution<T = void>(parameters: Parameters.UpdateResolution, callback?: never): Promise<T>;
    /**
     * Deletes an issue resolution.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the
     * task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** _Administer Jira_ [global
     * permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    deleteResolution<T = Models.TaskProgressObject>(parameters: Parameters.DeleteResolution, callback: Callback<T>): Promise<void>;
    /**
     * Deletes an issue resolution.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the
     * task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** _Administer Jira_ [global
     * permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    deleteResolution<T = Models.TaskProgressObject>(parameters: Parameters.DeleteResolution, callback?: never): Promise<T>;
}
