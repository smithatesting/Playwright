"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectVersions = void 0;
const tslib_1 = require("tslib");
class ProjectVersions {
    constructor(client) {
        this.client = client;
    }
    getProjectVersionsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectIdOrKey = typeof parameters === 'string' ? parameters : parameters.projectIdOrKey;
            const config = {
                url: `/rest/api/3/project/${projectIdOrKey}/version`,
                method: 'GET',
                params: {
                    startAt: typeof parameters !== 'string' && parameters.startAt,
                    maxResults: typeof parameters !== 'string' && parameters.maxResults,
                    orderBy: typeof parameters !== 'string' && parameters.orderBy,
                    query: typeof parameters !== 'string' && parameters.query,
                    status: typeof parameters !== 'string' && parameters.status,
                    expand: typeof parameters !== 'string' && parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProjectVersions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectIdOrKey = typeof parameters === 'string' ? parameters : parameters.projectIdOrKey;
            const config = {
                url: `/rest/api/3/project/${projectIdOrKey}/versions`,
                method: 'GET',
                params: {
                    expand: typeof parameters !== 'string' && parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/version',
                method: 'POST',
                data: {
                    expand: parameters.expand,
                    self: parameters.self,
                    id: parameters.id,
                    description: parameters.description,
                    name: parameters.name,
                    archived: parameters.archived,
                    released: parameters.released,
                    startDate: parameters.startDate,
                    releaseDate: parameters.releaseDate,
                    overdue: parameters.overdue,
                    userStartDate: parameters.userStartDate,
                    userReleaseDate: parameters.userReleaseDate,
                    project: parameters.project,
                    projectId: parameters.projectId,
                    moveUnfixedIssuesTo: parameters.moveUnfixedIssuesTo,
                    operations: parameters.operations,
                    issuesStatusForFixVersion: parameters.issuesStatusForFixVersion,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/3/version/${id}`,
                method: 'GET',
                params: {
                    expand: typeof parameters !== 'string' && parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/version/${parameters.id}`,
                method: 'PUT',
                data: {
                    expand: parameters.expand,
                    description: parameters.description,
                    name: parameters.name,
                    archived: parameters.archived,
                    released: parameters.released,
                    startDate: parameters.startDate,
                    releaseDate: parameters.releaseDate,
                    project: parameters.project,
                    projectId: parameters.projectId,
                    moveUnfixedIssuesTo: parameters.moveUnfixedIssuesTo,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/version/${parameters.id}`,
                method: 'DELETE',
                params: {
                    moveFixIssuesTo: parameters.moveFixIssuesTo,
                    moveAffectedIssuesTo: parameters.moveAffectedIssuesTo,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    mergeVersions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/version/${parameters.id}/mergeto/${parameters.moveIssuesTo}`,
                method: 'PUT',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    moveVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/version/${parameters.id}/move`,
                method: 'POST',
                data: {
                    after: parameters.after,
                    position: parameters.position,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getVersionRelatedIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/3/version/${id}/relatedIssueCounts`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteAndReplaceVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/version/${parameters.id}/removeAndSwap`,
                method: 'POST',
                data: {
                    moveFixIssuesTo: parameters.moveFixIssuesTo,
                    moveAffectedIssuesTo: parameters.moveAffectedIssuesTo,
                    customFieldReplacementList: parameters.customFieldReplacementList,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getVersionUnresolvedIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/3/version/${id}/unresolvedIssueCount`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.ProjectVersions = ProjectVersions;
//# sourceMappingURL=projectVersions.js.map